// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/microhq/federation-srv/proto/federation/federation.proto

/*
Package federation is a generated protocol buffer package.

It is generated from these files:
	github.com/microhq/federation-srv/proto/federation/federation.proto

It has these top-level messages:
	Config
	Topic
	Plugin
	Broker
	ConfigRequest
	ConfigResponse
*/
package federation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	api "github.com/micro/go-api"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Federation service

type FederationService interface {
	Config(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
}

type federationService struct {
	c    client.Client
	name string
}

func NewFederationService(name string, c client.Client) FederationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "federation"
	}
	return &federationService{
		c:    c,
		name: name,
	}
}

func (c *federationService) Config(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Federation.Config", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Federation service

type FederationHandler interface {
	Config(context.Context, *ConfigRequest, *ConfigResponse) error
}

func RegisterFederationHandler(s server.Server, hdlr FederationHandler, opts ...server.HandlerOption) error {
	type federation interface {
		Config(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
	}
	type Federation struct {
		federation
	}
	h := &federationHandler{hdlr}
	return s.Handle(s.NewHandler(&Federation{h}, opts...))
}

type federationHandler struct {
	FederationHandler
}

func (h *federationHandler) Config(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.FederationHandler.Config(ctx, in, out)
}
